<!-- This favicon was generated using the following font:

- Font Title: League Spartan
- Font Author: Copyright 2020 The League Spartan Project Authors (https://github.com/theleagueof/league-spartan)
- Font Source: http://fonts.gstatic.com/s/leaguespartan/v11/kJEnBuEW6A0lliaV_m88ja5Twtx8BWhtkDVmjZvM_oTpBMdcFguczA.ttf
- Font License: SIL Open Font License, 1.1 (http://scripts.sil.org/OFL)) -->

<!DOCTYPE html>
<html lang="en">
    <%- include('../includes/head.ejs') %>
    <body>
        <%- include('../includes/header.ejs') %>
        <%- include('../includes/menu.ejs') %>
        <%- include('../includes/loading.ejs') %>
        <div class="board-workspace">
            <div id="history" class="box-post-history">
                <div class="box-workspace-explain">
                    <h1>#<%= workSpace.workSpaceName %></h1>
                    <p>#<%= workSpace.workSpaceName %> <%= workSpace.createdAt %>에 생성되었습니다.</p>
                    <p>현재 <%= workSpace.users.length %>명이 참여하고있습니다.
                    <div class="workspace-member-list-box">
                        <div class="workspace-member-icon-box">
                            <div class="workspace-member-icon">
                                <i class="fa-solid fa-chevron-left fa-xl"></i>
                            </div>
                        </div>
                        <div class="workspace-member" onclick="getMemberListOnChannel()">
                            <img id="add-icon" src="/images/icons8-add-50.png">
                            <p>팀원 추가</p>
                        </div>
                        <% for(let user of workSpace.users) { %>
                            <div class="workspace-member">
                                <img src="<%= user.photo %>">
                                <p><%= user.name %></p>
                            </div>
                        <% } %>
                        <div class="workspace-member-icon-box">
                            <div class="workspace-member-icon">
                                <i class="fa-solid fa-chevron-right fa-xl"></i>
                            </div>
                        </div>
                    </div>
                    <% if(workSpace.comment) { %>
                        <p><span><i class="fa-regular fa-pen-to-square"></i></span><%= workSpace.comment %></p>
                    <% } else { %>
                        <p><span><i class="fa-regular fa-pen-to-square"></i></span>설명 스크립트를 자유롭게 남겨보세요.</p>
                    <% } %>
                </div>
                <div id="tab-box">
                    <a class="type" id="lastest" href="/channel/workspace/<%= workSpace.channelId %>/<%= workSpace._id %>?sort=lastest&&sortNum=-1">최신순</a>
                    <a class="type" id="old" href="/channel/workspace/<%= workSpace.channelId %>/<%= workSpace._id %>?sort=old&&sortNum=1">오래된순</a>
                    <a class="type" id="date" href="/channel/workspace/<%= workSpace.channelId %>/<%= workSpace._id %>?sort=select&&sortNum=1">날짜 선택</a>
                </div>
                <% if(workSpace.posts.length > 0) { %>
                    <% for(let post of workSpace.posts) { %>
                        <div class="post-container">
                            <div class="post-date">
                                <%= post.fomatDate %>
                            </div>
                            <div class="posts">
                                <div class="post-img-box">
                                    <img src="<%= post.creator.photo %>">
                                </div>
                                <div class="post">
                                    <div class="client-name"><%= post.creator.name %></div>
                                    <div class="post-comment"><%= post.content %></div>
                                    <p onclick="createThreadTag('<%= post._id %>')"><%= post.replies.length %>개의 댓글</p>
                                </div>
                            </div>
                        </div>
                    <% } %>
                <% } else { %>
                    <div class="post-container" style="text-align: center;">
                        <div class="posts" style="text-align: center;">
                            <div class="post">
                                <h1>새로운 게시물을 올려보세요.</h1>
                            </div>
                        </div>
                    </div>
                <% } %>
            </div>
            <div class="box-post-content">
                <textarea id="content" name="content" placeholder="#<%= workSpace.workSpaceName %>에 내용 올리기"></textarea>
                <div class="btn-group">
                    <button type="button" id="image"><i class="fa-solid fa-image fa-xl"></i></button>
                    <button type="button" id="send"><i class="fa-solid fa-paper-plane fa-xl"></i></button>
                </div>
            </div>
        </div>
        <!-- <div class="thread">
           
        </div> -->

        <script type="module">
            import { io } from "https://cdn.socket.io/4.3.2/socket.io.esm.min.js";

            const socket = io('http://localhost:8080');
            console.log('스크립트 소켓 가동 중!!!');

            const formatter = createdAt => {
                let year = new Date(createdAt).getFullYear();
                let month = new Date(createdAt).getMonth() + 1;
                let day = new Date(createdAt).getDate();
                const timestamp = new Date(createdAt).toTimeString().split(' ')[0];//ex)09:51:35 GMT+0900 (한국 표준시)

                let hour = parseInt(timestamp.split(':')[0]);

                const when = hour >= 12 ? '오후' : '오전';

                if(month < 10) {
                    month = '0' + month;
                }else if(month > 12) {
                    month = '0' + 1;
                }

                if(day < 10) {
                    day = '0' + day
                }
                if (when === '오후' && hour > 12) {
                    hour %= 12;
                }

                const min = timestamp.split(':')[1];

                const fomatDate = `${year}-${month}-${day}  ${when} ${hour}:${min}`;

                return fomatDate;
            }

            const createUnitPostTag = data => {
                const post = data.post;
                // 게시물 컨테이너
                const postContainer = document.createElement('div');
                postContainer.classList.add('post-container');
                
                // 타임 스탬프
                const postDate = document.createElement('div');
                const formatedTime = formatter(new Date());
                postDate.classList.add('post-date');
                postDate.textContent = formatedTime;

                // 게시물 정보를 담는 박스 태그
                const postsBox = document.createElement('div');
                postsBox.classList.add('posts');

                // 이미지 박스
                const postImgBox = document.createElement('div');
                const img = document.createElement('img');
                img.setAttribute('src', post.creator.photo);
                postImgBox.classList.add('post-img-box');
                postImgBox.appendChild(img);
                console.log('postImgBox: ', postImgBox); 

                // 생성자 이름, 생성 내용, 댓글멘트
                const postBox = document.createElement('div');
                postBox.classList.add('post');

                // 닉네임
                const clientNameTag = document.createElement('div');
                clientNameTag.classList.add('client-name');
                clientNameTag.textContent = post.creator.name;
                postBox.appendChild(clientNameTag);
                console.log('clientNameTag: ', clientNameTag);

                // 내용
                const postComment = document.createElement('div');
                postComment.classList.add('post-comment');
                postComment.textContent = post.content;
                postBox.appendChild(postComment);
                console.log('postComment: ', postComment);

                postsBox.appendChild(postImgBox);
                postsBox.appendChild(postBox);

                postContainer.appendChild(postDate);
                postContainer.appendChild(postsBox);

                const historyTag = document.querySelector('.box-post-history');
                historyTag.appendChild(postContainer);

                document.getElementById('content').value = "";

                //스크롤 맨아래로 조정
                historyTag.scrollTop = historyTag.scrollHeight;
            }

            const createUnitReplyTag = data => {
                const thread = document.querySelector('.thread');

                // 댓글 박스
                const replyBox = document.createElement('div');
                replyBox.classList.add('replies');

                // 이미지 박스
                const replyImgBox = document.createElement('div');
                const img = document.createElement('img');
                img.setAttribute('src', data.reply.creator.photo);
                replyImgBox.classList.add('reply-img-box');
                replyImgBox.appendChild(img);
                console.log('replyImgBox: ', replyImgBox);

                // 생성자 이름, 댓글멘트
                const creatorBox = document.createElement('div');
                creatorBox.classList.add('reply-creator');

                // 경과 일수
                const passedTimeSpan = document.createElement('span');
                const passedTime = Math.ceil(new Date(data.reply.createdAt).getDay() - new Date().getDay());
                const formatterDay = new Intl.RelativeTimeFormat('ko', {
                    numeric: 'auto'
                });
                passedTimeSpan.classList.add('passed-time');
                passedTimeSpan.textContent = formatterDay.format(passedTime, 'day');

                // 닉네임
                const clientNameTag = document.createElement('div');
                clientNameTag.classList.add('client-name');
                clientNameTag.textContent = data.reply.creator.name;
                clientNameTag.appendChild(passedTimeSpan);
                creatorBox.appendChild(clientNameTag);
                console.log('clientNameTag: ', clientNameTag);


                // 댓글멘트
                const replyComment = document.createElement('div');
                replyComment.classList.add('reply-comment');
                replyComment.textContent = data.reply.content;
                creatorBox.appendChild(replyComment);
                console.log('replyComment: ', replyComment);

                replyBox.appendChild(replyImgBox);
                replyBox.appendChild(creatorBox);

                thread.appendChild(replyBox);
            }

            const dataLoading = (data, className, callback) => {
                const img = document.createElement('img')
                const p = document.createElement('p');
                img.setAttribute('src','/images/icons8-spinner.gif');
                img.setAttribute('width','100px');
                img.setAttribute('height','100px');
                p.id = 'load';
                img.id = 'img'
                p.textContent = '새로운 데이터가 업로드 되고있습니다.';
                document.querySelector(className).appendChild(p);
                document.querySelector(className).appendChild(img);
                const historyTag = document.querySelector(className);

                //채팅박스 스크롤 맨 아래로 위치
                historyTag.scrollTop = historyTag.scrollHeight;
        
                setTimeout(() => {
                    const removeTag1 = document.getElementById('load');
                    const removeTag2 = document.getElementById('img');
                    document.querySelector(className).removeChild(removeTag1);
                    document.querySelector(className).removeChild(removeTag2);
                    // 실시간으로 게시물 업데이트
                    callback(data);
                }, 3000);
            }
            // 게시물 업데이트
            socket.on('uploadPost', async data => {
                console.log('미들웨어 uploadPost!!!');
                console.log('백엔드에서 넘어온 데이터: ', data);

                if(data){
                    dataLoading(data, '.box-post-history', createUnitPostTag);
                }else {
                    return;
                }
            });

            // 댓글 업데이트
            socket.on('createReply', async data => {
                console.log('미들웨어 uploadPost!!!');
                console.log('백엔드에서 넘어온 데이터: ', data);

                if(data){
                    dataLoading(data,'.thread', createUnitReplyTag);
                }else {
                    return;
                }
            });
            
          </script>
        <%- include('../includes/script.ejs') %>       
    </body>   
</html>
